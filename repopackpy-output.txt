================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2024-11-07T14:16:50.453732

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
.github\CODEOWNERS
.github\workflows\ci.yml
LICENSE
README.md
docs\Makefile
docs\README.md
docs\api_reference.md
docs\conf.py
docs\firmware_guide.md
docs\index.rst
docs\make.bat
docs\source\limonata.actuators.rst
docs\source\limonata.control_algorithms.advanced.rst
docs\source\limonata.control_algorithms.machine_learning.rst
docs\source\limonata.control_algorithms.rst
docs\source\limonata.control_algorithms.state_estimation.rst
docs\source\limonata.control_algorithms.supervisory.rst
docs\source\limonata.rst
docs\source\limonata.safety.rst
docs\source\limonata.sensors.rst
docs\source\modules.rst
docs\user_guide.md
firmware\__init__.py
firmware\communication.cpp
firmware\firmware.ino
firmware\utilities.cpp
limonata\__init__.py
limonata\actuators\__init__.py
limonata\actuators\agitator.py
limonata\actuators\bldc_pump.py
limonata\actuators\heat_element.py
limonata\actuators\peristaltic_pump.py
limonata\config_manager.py
limonata\control_algorithms\__init__.py
limonata\control_algorithms\advanced\__init__.py
limonata\control_algorithms\advanced\adaptive.py
limonata\control_algorithms\advanced\lqr.py
limonata\control_algorithms\advanced\mpc.py
limonata\control_algorithms\advanced\robust.py
limonata\control_algorithms\advanced\smc.py
limonata\control_algorithms\machine_learning\__init__.py
limonata\control_algorithms\machine_learning\fuzzy_logic.py
limonata\control_algorithms\machine_learning\nn.py
limonata\control_algorithms\machine_learning\rl.py
limonata\control_algorithms\state_estimation\__init__.py
limonata\control_algorithms\state_estimation\extended_kalman_filter.py
limonata\control_algorithms\state_estimation\kalman_filter.py
limonata\control_algorithms\state_estimation\particle_filter.py
limonata\control_algorithms\supervisory\__init__.py
limonata\control_algorithms\supervisory\rule_based.py
limonata\control_algorithms\supervisory\scada.py
limonata\control_algorithms\supervisory\scheduling.py
limonata\data_logging.py
limonata\reactor.py
limonata\safety\__init__.py
limonata\safety\fault_detection.py
limonata\safety\hazard_identification.py
limonata\safety\risk_assessment.py
limonata\safety\transient_analysis.py
limonata\sensor_data_processing.py
limonata\sensors\__init__.py
limonata\sensors\density_sensor.py
limonata\sensors\flow_sensor.py
limonata\sensors\level_sensor.py
limonata\sensors\load_cell.py
limonata\sensors\ph_sensor.py
limonata\sensors\pressure_sensor.py
limonata\serial_comm.py
limonata\simulation\manager.py
limonata\timer.py
limonata\version.py
main.py
pyproject.toml
tests\test_reactor.py

================================================================
Repository Files
================================================================

================
File: LICENSE
================
MIT License

Copyright (c) 2022 Ross Lee

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: main.py
================
import numpy as np
import pandas as pd
import limonata
import time
import pyqtgraph as pg
from pyqtgraph.Qt import QtWidgets, QtCore  # Updated to use QtWidgets

# generate step test data on Arduino
filename = 'limonata_dyn_data1.csv'

# heater steps
Qd = np.zeros(601)
Qd[10:200] = 80
Qd[200:400] = 20
Qd[400:] = 50

# Connect to Arduino
a = limonata.ReactorModel()
fid = open(filename, 'w')
fid.write('Time,H1,T1\n')
fid.close()

# Create PyQtGraph application
app = QtWidgets.QApplication([])  # Updated to use QtWidgets.QApplication
win = pg.GraphicsLayoutWidget(show=True)
win.setWindowTitle('Real-time Plotting')

# Create two plots: one for heater, one for temperature
heater_plot = win.addPlot(title="Heater Output (%)")
heater_curve = heater_plot.plot(pen='b')

win.nextRow()  # Move to the next row in the grid layout

temp_plot = win.addPlot(title="Temperature (degC)")
temp_curve = temp_plot.plot(pen='r')

# Set axes labels
heater_plot.setLabel('left', 'Heater (%)')
heater_plot.setLabel('bottom', 'Time (s)')
temp_plot.setLabel('left', 'Temperature (degC)')
temp_plot.setLabel('bottom', 'Time (s)')

# Initialize data containers for real-time updating
time_vals = []
heater_vals = []
temp_vals = []

# PyQtGraph timer for real-time updates
timer = QtCore.QTimer()

def update_plot():
    i = len(time_vals)
    if i >= 601:
        timer.stop()
        a.close()  # Close the connection when finished
        return
    
    # Set heater value and get temperature
    a.Q1(Qd[i])
    time_vals.append(i)
    heater_vals.append(Qd[i])
    temp_vals.append(a.T1)

    # Update the curves with new data
    heater_curve.setData(time_vals, heater_vals)
    temp_curve.setData(time_vals, temp_vals)

    # Write data to CSV
    with open(filename, 'a') as fid:
        fid.write(f'{i},{Qd[i]},{a.T1}\n')

    # Print to console
    print(f'Time: {i}, H1: {Qd[i]}, T1: {a.T1}')

# Set timer to update the plot every second
timer.timeout.connect(update_plot)
timer.start(1000)  # 1000 ms = 1 second

# Start the PyQtGraph application
app.exec_()  # Updated to use app.exec_()

================
File: pyproject.toml
================
[tool.poetry]
name = "limonata"
version = "0.1.0"
description = "A modular reactor and control system for prototyping chemical processes."
authors = ["Ross Lee <ross_j_lee@outlook.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
numpy = "^2.1.2"
scipy = "^1.14.1"
matplotlib = "^3.9.2"
pyserial = "^3.5"
requests = "^2.32.3"
pandas = "^2.2.3"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
ruff = "^0.7.0"
mypy = "^1.12.0"
pytest-cov = "^5.0.0"
sphinx = "^8.1.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

================
File: README.md
================
```
Limonata
├─ .git
│  ├─ COMMIT_EDITMSG
│  ├─ config
│  ├─ description
│  ├─ FETCH_HEAD
│  ├─ HEAD
│  ├─ hooks
│  │  ├─ applypatch-msg.sample
│  │  ├─ commit-msg.sample
│  │  ├─ fsmonitor-watchman.sample
│  │  ├─ post-update.sample
│  │  ├─ pre-applypatch.sample
│  │  ├─ pre-commit.sample
│  │  ├─ pre-merge-commit.sample
│  │  ├─ pre-push.sample
│  │  ├─ pre-rebase.sample
│  │  ├─ pre-receive.sample
│  │  ├─ prepare-commit-msg.sample
│  │  ├─ push-to-checkout.sample
│  │  └─ update.sample
│  ├─ index
│  ├─ info
│  │  └─ exclude
│  ├─ logs
│  │  ├─ HEAD
│  │  └─ refs
│  │     ├─ heads
│  │     │  ├─ main
│  │     │  └─ Ross
│  │     └─ remotes
│  │        └─ origin
│  │           ├─ HEAD
│  │           ├─ main
│  │           └─ Ross
│  ├─ objects
│  │  ├─ 00
│  │  │  └─ 09af92a8a032eb77675a7e160e9476a9056fdb
│  │  ├─ 02
│  │  │  ├─ 5f433dd07cecced3b711b37fa2421ae746921c
│  │  │  └─ 751a2bdb1e0f9d724668b0dfad88376ff0e25f
│  │  ├─ 04
│  │  │  ├─ a5f89636efc1122bf97dfca46648ad40aa4f6d
│  │  │  ├─ aa5abc9c823709caf71080703cd15cfb835303
│  │  │  └─ b8c8b755c8fc659f57e45b582209924b850ab1
│  │  ├─ 07
│  │  │  └─ 528a47981d7f0b8513caad16108d9fb9ae4884
│  │  ├─ 08
│  │  │  ├─ 8fd9c222c27656b1cda07441f5ad07f2c5d69c
│  │  │  └─ bf41239ec9f270d838aa9c51b1fa65547ef934
│  │  ├─ 09
│  │  │  └─ 4a052a6e1b93a8f5f67e524574eb4f72cd07c6
│  │  ├─ 0c
│  │  │  └─ dcd974693b5bd53f264bb86cad65e28c12e396
│  │  ├─ 11
│  │  │  ├─ 28b0f516730c2b5819f06b1c8f0b060ac996d1
│  │  │  ├─ 6034515c33ad10fad0103c652087b4891b73e7
│  │  │  └─ b5db20708f4b37408db38557a55c7b4891322d
│  │  ├─ 12
│  │  │  └─ 890e9d18b220895b324cc42f461afe82991902
│  │  ├─ 13
│  │  │  └─ cf80c4b887d1e3103018b540f7cd39a9bb6c7f
│  │  ├─ 16
│  │  │  └─ dfbc812358301ab439fa244b23fce72d4e2d27
│  │  ├─ 1b
│  │  │  └─ 5d314284840bfabf95005e3024b0999f9f9305
│  │  ├─ 1e
│  │  │  └─ 2ad68fd3e301bd1de713db777c70841a050f0c
│  │  ├─ 21
│  │  │  └─ eb619fbb1d8cff89c8b5c7bf06275375548cc2
│  │  ├─ 22
│  │  │  └─ 9afbf754c5761cbf5486503bff5e4fe25c761e
│  │  ├─ 24
│  │  │  └─ bdafb40654b87103d67692bf56faa9f6ec0344
│  │  ├─ 25
│  │  │  └─ 7325ddfef7b5607b2196bb597a758ba93dcafe
│  │  ├─ 27
│  │  │  └─ ce4005028d8ea159d9b9d702d142c259b190c1
│  │  ├─ 28
│  │  │  └─ 2caf36ae8c42ed6fd090a662e2eb90d2173fb6
│  │  ├─ 29
│  │  │  └─ ecf220fee7a61ba7924073481da22582b8c639
│  │  ├─ 2a
│  │  │  ├─ 050fcc4159931c4b87117235f7a18edbac8cc8
│  │  │  └─ a5a6f53f2514ea013d17b5abe0d1ea70d73f42
│  │  ├─ 2d
│  │  │  └─ 9c5074543e7112fbc734226627ca58d218b16b
│  │  ├─ 2e
│  │  │  ├─ 5f4736033a16702cfb50e3184068d1aa007b13
│  │  │  └─ fdfa77f4cc99b833cbf16f04af2d8da9cc0152
│  │  ├─ 30
│  │  │  └─ a7529ed9e345b58f8dfbdd417fbe95335f04c4
│  │  ├─ 33
│  │  │  └─ de9806ca0eea10c14b8f4f61bf64edd1fddbd8
│  │  ├─ 35
│  │  │  ├─ a84898008df691958b4449d978be3f5693b80e
│  │  │  └─ f2acab5d02b5e5d987a8850c9881846ba75dcf
│  │  ├─ 36
│  │  │  ├─ 28c823dc05a3d5a51f5e6ddc451b32a917953c
│  │  │  ├─ 9c66de4164510807197ae19444886ccf0106c9
│  │  │  └─ addd0faff9320fe1531796e415dda927fd82ff
│  │  ├─ 37
│  │  │  ├─ 37f83a8757e526df228f982dbd0714e1419c7b
│  │  │  └─ 990d04c6516b9c96df1567cc066542a475de02
│  │  ├─ 39
│  │  │  └─ 19a17f8483faae1ecf373b042a2f8f776ccf5c
│  │  ├─ 3a
│  │  │  ├─ 1e01cfe7593ace32aa8bd2fd7bce36f1110594
│  │  │  └─ 92c8a0c67bbc683913a057d2ca87abb05f8931
│  │  ├─ 3b
│  │  │  ├─ 008ccc80954528cba431fb6612d1d38fd1714e
│  │  │  └─ d353228a57db4dad34f01852427a4e4500e2f6
│  │  ├─ 3c
│  │  │  └─ f33d79cd6d5dea23afe1d8c04d6a7d5be12f18
│  │  ├─ 3d
│  │  │  ├─ a064fe34e20529003222eece09847304baf6dd
│  │  │  └─ c1f76bc69e3f559bee6253b24fc93acee9e1f9
│  │  ├─ 40
│  │  │  ├─ 47ebb51dce5d3d6166d1b89ea5d435d0a5358c
│  │  │  ├─ 9daa96e1d03e783331a2a1d42d591ed2cfe464
│  │  │  └─ b62573d3018ff65ee3e23857decb33dcf6eecf
│  │  ├─ 41
│  │  │  ├─ 029fe1eb2d9e23a432388845be8731cea5b27c
│  │  │  ├─ aa5576b4669355325e3f72da007e194544c424
│  │  │  └─ d217bb0670821a56bfc67b9361307560e4fdc9
│  │  ├─ 43
│  │  │  └─ aa0d83bde96f4e279e27b0e100dc4b3d51670b
│  │  ├─ 47
│  │  │  └─ a9e87b50adfcd2f931242f63fdbdb4ff0d3d2c
│  │  ├─ 4a
│  │  │  └─ b3cc319685e4185c2cea08d271396b6ebd0914
│  │  ├─ 4c
│  │  │  └─ a5ec537b965d05bbd4c555db6c752890f97051
│  │  ├─ 4d
│  │  │  └─ 4fd9b6d1ab3361d260a12152f912bafb3498dc
│  │  ├─ 4e
│  │  │  ├─ 45f4ac798369c6fdfc888385978b8fb60a9bc0
│  │  │  └─ a23c5bdc5e647fec8ed66d15b5fca82017c231
│  │  ├─ 4f
│  │  │  └─ d287ed2b5df6217c8ea06ad270c910e0c51cf5
│  │  ├─ 50
│  │  │  ├─ 92265368d7501e5afba747d880f15029ac7ec3
│  │  │  └─ f368865530f9c421ff69ba37f06f475f535161
│  │  ├─ 51
│  │  │  └─ 1ce9ff808a25ff0e10049e3915ce70e559558f
│  │  ├─ 5a
│  │  │  └─ 84bb7044f96a28607b6637dc43543aa668c458
│  │  ├─ 5e
│  │  │  └─ 14ee9f6143654afb59b964c601a9a6983049be
│  │  ├─ 62
│  │  │  └─ 6eb8252f19397fa1858928453aeb3974bfa627
│  │  ├─ 64
│  │  │  └─ bb02d956594e203f414f618143357d1c6d3250
│  │  ├─ 65
│  │  │  └─ 26a46de2bd198be98f97bfa2a35b03f5968a31
│  │  ├─ 66
│  │  │  └─ 9bbd3843403a672502ab81ca10104917200fc1
│  │  ├─ 67
│  │  │  └─ eec560204fbbe0d1ffffa61e44b6115d9e0bd9
│  │  ├─ 69
│  │  │  └─ 4566e4a5c282a2d6f0ba5ce783b1b208d66480
│  │  ├─ 6a
│  │  │  └─ b5fb2d6be166b235e629b7ff52f2b195d9585e
│  │  ├─ 6b
│  │  │  └─ 10140e18e8acb49bae84c8eaa48c1244bc05c2
│  │  ├─ 6d
│  │  │  └─ 909e33651de9395ec987135f463af5443e7589
│  │  ├─ 6e
│  │  │  └─ b67bf152c5a88fc855aca12922a53c93659c9f
│  │  ├─ 70
│  │  │  ├─ 314d9e69ecb4569d615484ac1d4b3cbdecaea3
│  │  │  ├─ 915c6a6d6ed10fa4386700387609d151175b4d
│  │  │  └─ efef5610107c8fc4fff4511ee1adf2d74ace8b
│  │  ├─ 72
│  │  │  ├─ 137bc2825fb7ec91472b7f318f3e6470b8cfc5
│  │  │  └─ 9982a69f76864e8d3d30a832a4437b1e4d5d2f
│  │  ├─ 76
│  │  │  └─ eaf99102d0ef22508eff74b45bfbfdc3cf1e23
│  │  ├─ 77
│  │  │  └─ b1e0daee3570be11881d1f2a9f7acbac47e008
│  │  ├─ 7a
│  │  │  ├─ 397179a27a5e7846c9e678c118e17230378e27
│  │  │  └─ c4b4806043bf1271fb2843ff3837013e7e7f6a
│  │  ├─ 7b
│  │  │  ├─ 6523511be441ec1eaa17b2e581f75456f0ae50
│  │  │  ├─ 703e9c2cc13c94fe9f3b1f470ea74ae8a6decc
│  │  │  └─ fb2cbb99540c28e2eaa39d654d63463df9dc63
│  │  ├─ 7d
│  │  │  ├─ 8be9d1eeb2751ff94604f99d665408cf3a9c44
│  │  │  └─ c8252420a33195c088a70ad69f8ea4798fa77d
│  │  ├─ 81
│  │  │  └─ 9cf73886ab1c4174e7b9aa788cb700f9b3560c
│  │  ├─ 82
│  │  │  ├─ 50cce1d1645dcafc45b73b7be496a5cee62590
│  │  │  └─ d3abc8b1f28625b057cc06fdfd0256a84d54f6
│  │  ├─ 83
│  │  │  └─ 07bc7ddf6c7737d782e973dd4de07c0afc2a05
│  │  ├─ 84
│  │  │  ├─ 0c1123c1454ba1cbb2070d649e29b1efe698b1
│  │  │  └─ 9a53aa63da51885f8c90afa788211a5e48eb5a
│  │  ├─ 85
│  │  │  └─ e000c99c0f007008e0f30cfb47c33aeea35d94
│  │  ├─ 89
│  │  │  ├─ 26e4b0e6ed27799fc85f7a5bea98f0221e234a
│  │  │  └─ d9ce43e997b1d1312a35594b899b5992262642
│  │  ├─ 8b
│  │  │  ├─ 8644e65ad5ca74944360df87b4cbacf013e268
│  │  │  └─ 8b3000cb8a579f8fb4a54e8ff3693a44081215
│  │  ├─ 8d
│  │  │  ├─ 1ab5f6f1f768647196bbde1349ed7d193078f5
│  │  │  └─ e573638e20f36dc1081ebbd5bcb4cebc65d692
│  │  ├─ 8f
│  │  │  └─ dc13033cd502483611c5cc69aae433668ba900
│  │  ├─ 92
│  │  │  └─ 7aaa163dfb95c11b74e6ce840a27d962c35f45
│  │  ├─ 94
│  │  │  └─ cb8c91f866bb6bba3507cee2c809355a255f09
│  │  ├─ 95
│  │  │  ├─ 01c319025528152eff90dca6b58d2d9a5dd26e
│  │  │  ├─ 4237b9b9f2b248bb1397a15c055c0af1cad03e
│  │  │  └─ b84af0e56769eb8041df3e50a877ab84d1bad8
│  │  ├─ 96
│  │  │  └─ 55e5dc3f8d2b2d52dc0ad5ea71dfa9425f0f5b
│  │  ├─ 97
│  │  │  ├─ 041c9cd58a332eb5aca1cfec69b06bf37f97ca
│  │  │  ├─ 07c1c4320a713cb6563df94c6a48d80ceb365a
│  │  │  ├─ 1d0e16bee452e094f6460cc1e6c9e9ad999244
│  │  │  └─ 3cade4307f8aff6bea7dc7e284b49e530c37bc
│  │  ├─ 99
│  │  │  └─ 64b827ee029341ad8031a816e677f9f047254e
│  │  ├─ 9d
│  │  │  └─ 6ea07756b3913d1f5a57d4d1832bb1f8690745
│  │  ├─ 9e
│  │  │  ├─ 288349940c9dbd806b28c21d47e4c97aca68bf
│  │  │  └─ ae12dc0fcd7160bbe92d5bf104c72bc327e3fe
│  │  ├─ a0
│  │  │  └─ 5531c3ee595a8c529fa31c23eb56a42af376dc
│  │  ├─ a2
│  │  │  ├─ d5d5f1b35daa9152d8d685721b8d7c446354f7
│  │  │  └─ f38661d6ccc8b46e7450bbd048defff1c39bb9
│  │  ├─ a5
│  │  │  ├─ b04b749b98c6b243ace55aad900b1c52d59083
│  │  │  └─ f908584f87e62d9d3dcd8f49928c3ed89c844c
│  │  ├─ a6
│  │  │  └─ 23c6f669ced466f349119ff54c7e1823e9b256
│  │  ├─ a8
│  │  │  ├─ 4a0ed999ee35093c96fbd38b6bc833e18259ca
│  │  │  └─ 98dcf686398434e9048f095346d7360b02cb8e
│  │  ├─ a9
│  │  │  ├─ 6c196812cf61b57e23c77f5aaf364e20016a28
│  │  │  └─ b167764b489b29eccc5f6c42b6461431264ce6
│  │  ├─ aa
│  │  │  └─ 12e46918146da47b448abb455527d2193446a2
│  │  ├─ ae
│  │  │  ├─ 40ad9250e4ca10ede64cd17a406aa32e9667b2
│  │  │  └─ 88996328a977b35687d0e4216e0fde19cf9bc6
│  │  ├─ af
│  │  │  └─ 7aac64f99b1a5ae8fd8b3f3b750980a43da223
│  │  ├─ b0
│  │  │  └─ 608bfdc9d55e4f0be57d1e2a8249881448b88b
│  │  ├─ b4
│  │  │  ├─ 0bc41ec938a206cf129ccbceadd10496f49149
│  │  │  ├─ 65ce800d3f138b56f812cf927b4fd65bdf2ff0
│  │  │  └─ d79ceac52c43d885a301c7b2c2439d1a086b02
│  │  ├─ b9
│  │  │  └─ a271d2c263314a1f1e0006f3602c7070f35c2e
│  │  ├─ ba
│  │  │  └─ b49dc5a6aae8051072b0a63f010a7bd54ce06a
│  │  ├─ bb
│  │  │  └─ 128213bf307c43180841b557a7d52e15e8496d
│  │  ├─ bd
│  │  │  └─ 087ad038bce70b7b7026f09baf28a518aca9ad
│  │  ├─ be
│  │  │  ├─ 5a60bc3ceab560acf42ebf181fdcb58295d716
│  │  │  └─ 993844f0a919643452ef706ebcbd1f50f6c118
│  │  ├─ c2
│  │  │  ├─ 2907a636bb961682d6f98e6864305e9155cf04
│  │  │  ├─ dfde243642d86df63befb3116f61bb173a44d7
│  │  │  ├─ e35bf58b2d61b996640f4b191ab76148ee024a
│  │  │  └─ e40ed4ef62db918c2d1a6745766f098a479017
│  │  ├─ c4
│  │  │  └─ 52e069544a492743ce3af3d34f9cac3a159ada
│  │  ├─ ca
│  │  │  ├─ 358b091a68f299101df711cc062e25a29cf751
│  │  │  └─ 9578eb39d888774ecb8bd86630ccc7cf772f0f
│  │  ├─ cc
│  │  │  └─ ab2d111ffbfca5fedd344a3733b2d8800820a6
│  │  ├─ ce
│  │  │  ├─ 13d98e0b2e9cfea2bf13d6c0c1de5a240ae59e
│  │  │  ├─ 3bd810b5f7e8307f7b6bad9aea358a92b2c264
│  │  │  └─ f965197c49515ebfb770e8893dcaba15d4c36a
│  │  ├─ cf
│  │  │  ├─ 1a1e837244150c49c55f3373bce146cd8f738d
│  │  │  └─ 865cdbd1723164a19cd81633afa19ff772bd4a
│  │  ├─ d1
│  │  │  ├─ 8417a3155af96cec240b4feba256eecdfc7cde
│  │  │  └─ fbfb1fe4618df5e07ffe70399157404a8a0ab6
│  │  ├─ d2
│  │  │  └─ f34b560ee1fd14b32e2f0c993d54aa874d2c7b
│  │  ├─ d3
│  │  │  ├─ 1c35832c6638ea45b4dc1bb533d9e15f42adab
│  │  │  ├─ f5240caa0b98c293417cb854851020d4e6c8c2
│  │  │  └─ f939aec80b3af2e65868183706f3ecce74785e
│  │  ├─ d4
│  │  │  ├─ 8ac18c736e719ab146322104a364083b0fa0f3
│  │  │  └─ bb2cbb9eddb1bb1b4f366623044af8e4830919
│  │  ├─ d5
│  │  │  └─ 2221f7693c058e23453cda0113612acf8ff71c
│  │  ├─ d8
│  │  │  └─ 2e11b277522b9983791d758157c4a0c6ab023e
│  │  ├─ d9
│  │  │  └─ bab08e496dcd3a0d8c96f2b767b81c315e2b12
│  │  ├─ da
│  │  │  └─ ca58e4f33de8d2edeb251630692b97c8ed357c
│  │  ├─ db
│  │  │  └─ 3297989a34dccfcb7a8497cdc1b0b602cbcf06
│  │  ├─ dd
│  │  │  └─ d1b9913afe72df226853f6963964fe5d5da819
│  │  ├─ de
│  │  │  └─ f3865463f8d78610e873b5a02e5068e2d76696
│  │  ├─ df
│  │  │  └─ 1a752ec6acf3bcb0175c5609d4ee48f8c1492c
│  │  ├─ e0
│  │  │  └─ 5200fdbbd7bd235eb3497a9e6c9ba8493d5f33
│  │  ├─ e1
│  │  │  └─ 894d46e8bb2ae2c3e342f20b1bfa2ce9b64ff0
│  │  ├─ e2
│  │  │  └─ 6ae363cc5a0c4dbf8310dc3f6c8a99b4c34003
│  │  ├─ e3
│  │  │  └─ f39d18bf25a3bb57e0193bbf04d9286a907ab4
│  │  ├─ e6
│  │  │  ├─ 846a266b58691d4d395e889de00a1dc0ef82ad
│  │  │  └─ 9de29bb2d1d6434b8b29ae775ad8c2e48c5391
│  │  ├─ e7
│  │  │  └─ 10e5f7aecb2aa225aece691b920ba92e8bf145
│  │  ├─ e9
│  │  │  └─ 30a7a0be5d1b06c9c95818212a5487d1a0e33b
│  │  ├─ ea
│  │  │  └─ f0bc741f0faee368388a5a42f38d969c5dd677
│  │  ├─ ec
│  │  │  ├─ 8cac487373ffc4a097c7005074cfb30fd79e02
│  │  │  └─ fb1da84b1a0cca7b0ddd82228eb7a49212a28f
│  │  ├─ ee
│  │  │  └─ 054abfd84cc25da5f4d1d2c41288e1bdf08060
│  │  ├─ ef
│  │  │  └─ a42644fc0bc87db23fda0be65e1f28373d3188
│  │  ├─ f1
│  │  │  └─ eed5c3ae6ef553b815339b6fe7ada8f0402822
│  │  ├─ f2
│  │  │  └─ f9d961fb2d421b9b19f0d79debb3c09d6797d5
│  │  ├─ f3
│  │  │  └─ 76dd208217709009b2a32c2315915fdf311392
│  │  ├─ f4
│  │  │  └─ cdf215fdd88ddf91f15328f610a6ee8b3f5819
│  │  ├─ f9
│  │  │  ├─ 3cb977846d800b839676856e6c44ad6e687102
│  │  │  └─ d98e26cf583042dc13ca1e0d0b2512871a9183
│  │  ├─ fb
│  │  │  ├─ 8300a2cbbc60afcd3c5c297e11f668ba470c0c
│  │  │  ├─ 96bdb64417092ffe681f8ee0b9d59162a06de7
│  │  │  └─ a95584c390fb9e862c1cfbe4732a2e0fa68956
│  │  ├─ ff
│  │  │  └─ 7dc66f9a75dd00a159912b9ad9e5e05c26c190
│  │  ├─ info
│  │  └─ pack
│  │     ├─ pack-b145832fdb1f2cc96c7d232d0262f5205f1a0682.idx
│  │     └─ pack-b145832fdb1f2cc96c7d232d0262f5205f1a0682.pack
│  ├─ ORIG_HEAD
│  ├─ packed-refs
│  └─ refs
│     ├─ heads
│     │  ├─ main
│     │  └─ Ross
│     ├─ remotes
│     │  └─ origin
│     │     ├─ HEAD
│     │     ├─ main
│     │     └─ Ross
│     └─ tags
├─ .github
│  ├─ CODEOWNERS
│  └─ workflows
│     └─ ci.yml
├─ .gitignore
├─ .pytest_cache
│  ├─ .gitignore
│  ├─ CACHEDIR.TAG
│  ├─ README.md
│  └─ v
│     └─ cache
│        ├─ lastfailed
│        ├─ nodeids
│        └─ stepwise
├─ config
├─ docs
│  ├─ api_reference.md
│  ├─ conf.py
│  ├─ firmware_guide.md
│  ├─ index.rst
│  ├─ make.bat
│  ├─ Makefile
│  ├─ README.md
│  ├─ source
│  │  ├─ limonata.actuators.rst
│  │  ├─ limonata.control_algorithms.advanced.rst
│  │  ├─ limonata.control_algorithms.machine_learning.rst
│  │  ├─ limonata.control_algorithms.rst
│  │  ├─ limonata.control_algorithms.state_estimation.rst
│  │  ├─ limonata.control_algorithms.supervisory.rst
│  │  ├─ limonata.rst
│  │  ├─ limonata.safety.rst
│  │  ├─ limonata.sensors.rst
│  │  └─ modules.rst
│  ├─ user_guide.md
│  ├─ _static
│  └─ _templates
├─ firmware
│  ├─ actuators
│  ├─ communication.cpp
│  ├─ firmware.ino
│  ├─ sensors
│  ├─ utilities.cpp
│  └─ __init__.py
├─ LICENSE
├─ limonata
│  ├─ actuators
│  │  ├─ agitator.py
│  │  ├─ bldc_pump.py
│  │  ├─ heat_element.py
│  │  ├─ peristaltic_pump.py
│  │  └─ __init__.py
│  ├─ config_manager.py
│  ├─ control_algorithms
│  │  ├─ advanced
│  │  │  ├─ adaptive.py
│  │  │  ├─ lqr.py
│  │  │  ├─ mpc.py
│  │  │  ├─ robust.py
│  │  │  ├─ smc.py
│  │  │  └─ __init__.py
│  │  ├─ machine_learning
│  │  │  ├─ fuzzy_logic.py
│  │  │  ├─ nn.py
│  │  │  ├─ rl.py
│  │  │  └─ __init__.py
│  │  ├─ state_estimation
│  │  │  ├─ extended_kalman_filter.py
│  │  │  ├─ kalman_filter.py
│  │  │  ├─ particle_filter.py
│  │  │  └─ __init__.py
│  │  ├─ supervisory
│  │  │  ├─ rule_based.py
│  │  │  ├─ scada.py
│  │  │  ├─ scheduling.py
│  │  │  └─ __init__.py
│  │  └─ __init__.py
│  ├─ data_logging.py
│  ├─ reactor.py
│  ├─ safety
│  │  ├─ fault_detection.py
│  │  ├─ hazard_identification.py
│  │  ├─ risk_assessment.py
│  │  ├─ transient_analysis.py
│  │  └─ __init__.py
│  ├─ sensors
│  │  ├─ density_sensor.py
│  │  ├─ flow_sensor.py
│  │  ├─ level_sensor.py
│  │  ├─ load_cell.py
│  │  ├─ ph_sensor.py
│  │  ├─ pressure_sensor.py
│  │  └─ __init__.py
│  ├─ sensor_data_processing.py
│  ├─ serial_comm.py
│  ├─ timer.py
│  ├─ version.py
│  └─ __init__.py
├─ main.py
├─ pyproject.toml
└─ tests
   └─ test_reactor.py

```

================
File: .github\CODEOWNERS
================
@leeros00

================
File: .github\workflows\ci.yml
================
name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "${HOME}/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry install

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

    - name: Run linting
      run: poetry run ruff check --fix 

    - name: Run type-checking
      run: poetry run mypy limonata

    - name: Formatting
      run: poetry run ruff format

    - name: Check dependency updates
      run: poetry update

    - name: Build Sphinx documentation
      run: |
        cd docs
        poetry run sphinx-apidoc -o source/ ../limonata
        poetry run make html

================
File: docs\conf.py
================
# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

import os
import sys

sys.path.insert(0, os.path.abspath("../limonata"))

extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",  # Optional, for Google/NumPy-style docstrings
]


project = "limonata"
copyright = "2024, Ross Lee"
author = "Ross Lee"
release = "0.1.0"

# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = []

templates_path = ["_templates"]
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]


# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

html_theme = "alabaster"
html_static_path = ["_static"]

================
File: docs\index.rst
================
.. limonata documentation master file, created by
   sphinx-quickstart on Thu Oct 17 18:36:17 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

limonata documentation
======================

Add your content using ``reStructuredText`` syntax. See the
`reStructuredText <https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_
documentation for details.


.. toctree::
   :maxdepth: 2
   :caption: Contents:

================
File: docs\make.bat
================
@ECHO OFF

pushd %~dp0

REM Command file for Sphinx documentation

if "%SPHINXBUILD%" == "" (
	set SPHINXBUILD=sphinx-build
)
set SOURCEDIR=.
set BUILDDIR=_build

%SPHINXBUILD% >NUL 2>NUL
if errorlevel 9009 (
	echo.
	echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
	echo.installed, then set the SPHINXBUILD environment variable to point
	echo.to the full path of the 'sphinx-build' executable. Alternatively you
	echo.may add the Sphinx directory to PATH.
	echo.
	echo.If you don't have Sphinx installed, grab it from
	echo.https://www.sphinx-doc.org/
	exit /b 1
)

if "%1" == "" goto help

%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
goto end

:help
%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%

:end
popd

================
File: docs\Makefile
================
# Minimal makefile for Sphinx documentation
#

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?=
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = .
BUILDDIR      = _build

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

.PHONY: help Makefile

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

================
File: docs\README.md
================
# Limonata
Limonata is an open-source platform for ChemE students, educators, and hobbyists to prototype their ideas with Arduino. It uses a C/C++/Arduino API for the firmware and Python wrapping and abstraction layers for ease-of-use and integration with machine learning. Inspired by the elegance and simplicity of the TCLab, Limonata seeks to bridge the barriers to entry for chemical engineering education, prototyping, and hobbyism alike. 

Our first objective is to create a platform capable of creating mineral lemonade, meaning carbonated lemonade. This is because as a goal it compels us to work with flow control for the most predominant states/phases of matter--solids (sugar), liquids (water), solutions (lemon juice), and gases (carbon dioxide). 
Once this objective has been met, we should expect to experiment with more complex processes.

We also anticipate the introduction of a GUI for easy prototyping and control applications. This is in development.

================
File: docs\source\limonata.actuators.rst
================
limonata.actuators package
==========================

Submodules
----------

limonata.actuators.agitator module
----------------------------------

.. automodule:: limonata.actuators.agitator
   :members:
   :undoc-members:
   :show-inheritance:

limonata.actuators.bldc\_pump module
------------------------------------

.. automodule:: limonata.actuators.bldc_pump
   :members:
   :undoc-members:
   :show-inheritance:

limonata.actuators.heat\_element module
---------------------------------------

.. automodule:: limonata.actuators.heat_element
   :members:
   :undoc-members:
   :show-inheritance:

limonata.actuators.peristaltic\_pump module
-------------------------------------------

.. automodule:: limonata.actuators.peristaltic_pump
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata.actuators
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.control_algorithms.advanced.rst
================
limonata.control\_algorithms.advanced package
=============================================

Submodules
----------

limonata.control\_algorithms.advanced.adaptive module
-----------------------------------------------------

.. automodule:: limonata.control_algorithms.advanced.adaptive
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.advanced.lqr module
------------------------------------------------

.. automodule:: limonata.control_algorithms.advanced.lqr
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.advanced.mpc module
------------------------------------------------

.. automodule:: limonata.control_algorithms.advanced.mpc
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.advanced.robust module
---------------------------------------------------

.. automodule:: limonata.control_algorithms.advanced.robust
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.advanced.smc module
------------------------------------------------

.. automodule:: limonata.control_algorithms.advanced.smc
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata.control_algorithms.advanced
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.control_algorithms.machine_learning.rst
================
limonata.control\_algorithms.machine\_learning package
======================================================

Submodules
----------

limonata.control\_algorithms.machine\_learning.fuzzy\_logic module
------------------------------------------------------------------

.. automodule:: limonata.control_algorithms.machine_learning.fuzzy_logic
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.machine\_learning.nn module
--------------------------------------------------------

.. automodule:: limonata.control_algorithms.machine_learning.nn
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.machine\_learning.rl module
--------------------------------------------------------

.. automodule:: limonata.control_algorithms.machine_learning.rl
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata.control_algorithms.machine_learning
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.control_algorithms.rst
================
limonata.control\_algorithms package
====================================

Subpackages
-----------

.. toctree::
   :maxdepth: 4

   limonata.control_algorithms.advanced
   limonata.control_algorithms.machine_learning
   limonata.control_algorithms.state_estimation
   limonata.control_algorithms.supervisory

Module contents
---------------

.. automodule:: limonata.control_algorithms
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.control_algorithms.state_estimation.rst
================
limonata.control\_algorithms.state\_estimation package
======================================================

Submodules
----------

limonata.control\_algorithms.state\_estimation.extended\_kalman\_filter module
------------------------------------------------------------------------------

.. automodule:: limonata.control_algorithms.state_estimation.extended_kalman_filter
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.state\_estimation.kalman\_filter module
--------------------------------------------------------------------

.. automodule:: limonata.control_algorithms.state_estimation.kalman_filter
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.state\_estimation.particle\_filter module
----------------------------------------------------------------------

.. automodule:: limonata.control_algorithms.state_estimation.particle_filter
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata.control_algorithms.state_estimation
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.control_algorithms.supervisory.rst
================
limonata.control\_algorithms.supervisory package
================================================

Submodules
----------

limonata.control\_algorithms.supervisory.rule\_based module
-----------------------------------------------------------

.. automodule:: limonata.control_algorithms.supervisory.rule_based
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.supervisory.scada module
-----------------------------------------------------

.. automodule:: limonata.control_algorithms.supervisory.scada
   :members:
   :undoc-members:
   :show-inheritance:

limonata.control\_algorithms.supervisory.scheduling module
----------------------------------------------------------

.. automodule:: limonata.control_algorithms.supervisory.scheduling
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata.control_algorithms.supervisory
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.rst
================
limonata package
================

Subpackages
-----------

.. toctree::
   :maxdepth: 4

   limonata.actuators
   limonata.control_algorithms
   limonata.safety
   limonata.sensors

Submodules
----------

limonata.config\_manager module
-------------------------------

.. automodule:: limonata.config_manager
   :members:
   :undoc-members:
   :show-inheritance:

limonata.data\_logging module
-----------------------------

.. automodule:: limonata.data_logging
   :members:
   :undoc-members:
   :show-inheritance:

limonata.reactor module
-----------------------

.. automodule:: limonata.reactor
   :members:
   :undoc-members:
   :show-inheritance:

limonata.sensor\_data\_processing module
----------------------------------------

.. automodule:: limonata.sensor_data_processing
   :members:
   :undoc-members:
   :show-inheritance:

limonata.serial\_comm module
----------------------------

.. automodule:: limonata.serial_comm
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.safety.rst
================
limonata.safety package
=======================

Submodules
----------

limonata.safety.fault\_detection module
---------------------------------------

.. automodule:: limonata.safety.fault_detection
   :members:
   :undoc-members:
   :show-inheritance:

limonata.safety.hazard\_identification module
---------------------------------------------

.. automodule:: limonata.safety.hazard_identification
   :members:
   :undoc-members:
   :show-inheritance:

limonata.safety.risk\_assessment module
---------------------------------------

.. automodule:: limonata.safety.risk_assessment
   :members:
   :undoc-members:
   :show-inheritance:

limonata.safety.transient\_analysis module
------------------------------------------

.. automodule:: limonata.safety.transient_analysis
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata.safety
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\limonata.sensors.rst
================
limonata.sensors package
========================

Submodules
----------

limonata.sensors.density\_sensor module
---------------------------------------

.. automodule:: limonata.sensors.density_sensor
   :members:
   :undoc-members:
   :show-inheritance:

limonata.sensors.flow\_sensor module
------------------------------------

.. automodule:: limonata.sensors.flow_sensor
   :members:
   :undoc-members:
   :show-inheritance:

limonata.sensors.level\_sensor module
-------------------------------------

.. automodule:: limonata.sensors.level_sensor
   :members:
   :undoc-members:
   :show-inheritance:

limonata.sensors.load\_cell module
----------------------------------

.. automodule:: limonata.sensors.load_cell
   :members:
   :undoc-members:
   :show-inheritance:

limonata.sensors.ph\_sensor module
----------------------------------

.. automodule:: limonata.sensors.ph_sensor
   :members:
   :undoc-members:
   :show-inheritance:

limonata.sensors.pressure\_sensor module
----------------------------------------

.. automodule:: limonata.sensors.pressure_sensor
   :members:
   :undoc-members:
   :show-inheritance:

Module contents
---------------

.. automodule:: limonata.sensors
   :members:
   :undoc-members:
   :show-inheritance:

================
File: docs\source\modules.rst
================
limonata
========

.. toctree::
   :maxdepth: 4

   limonata

================
File: firmware\firmware.ino
================
/*
Limonata Firmware
Ross Lee
September 2023
*/

#include "Arduino.h"

// determine board type
#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
  String boardType = "Arduino Uno";
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__)
  String boardType = "Arduino Leonardo/Micro";
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
  String boardType = "Arduino Mega";
#elif defined(ARDUINO_ARCH_STM32) || defined(ARDUINO_GIGA)
String boardType = "Arduino Giga";
#else 
  String boardType = "Unknown board";
#endif

// Enable debugging output
const bool DEBUG = false;

// constants
const String vers = "0.1.0";   // version of this firmware
const long baud = 115200;      // serial baud rate
const char sp = ' ';           // command separator
const char nl = '\n';          // command terminator


const int pinT1   = 0;         // T1
const int pinT2   = 2;         // T2
const int pinQ1   = 3;         // Q1
const int pinQ2   = 5;         // Q2
const int pinLED1 = 9;         // LED1

// temperature alarm limits
const int limT1   = 50;       // T1 high alarm (°C)
const int limT2   = 50;       // T2 high alarm (°C)

// LED1 levels
const int hiLED   =  60;       // hi LED
const int loLED   = hiLED/16;  // lo LED

// global variables
char Buffer[64];               // buffer for parsing serial input
int buffer_index = 0;          // index for Buffer
String cmd;                    // command
float val;                     // command value
int ledStatus;                 // 1: loLED
                               // 2: hiLED
                               // 3: loLED blink
                               // 4: hiLED blink
long ledTimeout = 0;           // when to return LED to normal operation
float LED = 100;               // LED override brightness
float P1 = 200;                // heater 1 power limit in units of pwm. Range 0 to 255
float P2 = 100;                // heater 2 power limit in units in pwm, range 0 to 255
float Q1 = 0;                  // last value written to heater 1 in units of percent
float Q2 = 0;                  // last value written to heater 2 in units of percent
int alarmStatus;               // hi temperature alarm status
boolean newData = false;       // boolean flag indicating new command
int n =  10;                   // number of samples for each temperature measurement


void readCommand() {
  while (Serial && (Serial.available() > 0) && (newData == false)) {
    int byte = Serial.read();
    if ((byte != '\r') && (byte != nl) && (buffer_index < 64)) {
      Buffer[buffer_index] = byte;
      buffer_index++;
    }
    else {
      newData = true;
    }
  }   
}

// for debugging with the serial monitor in Arduino IDE
void echoCommand() {
  if (newData) {
    Serial.write("Received Command: ");
    Serial.write(Buffer, buffer_index);
    Serial.write(nl);
    Serial.flush();
  }
}

// return average  of n reads of thermister temperature in °C
inline float readTemperature(int pin) {
  float degC = 0.0;
  for (int i = 0; i < n; i++) {
    degC += analogRead(pin) * 0.322265625 - 50.0;    // use for 3.3v AREF
    //degC += analogRead(pin) * 0.170898438 - 50.0;  // use for 1.75v AREF
  }
  return degC / float(n);
}

void parseCommand(void) {
  if (newData) {
    String read_ = String(Buffer);

    // separate command from associated data
    int idx = read_.indexOf(sp);
    cmd = read_.substring(0, idx);
    cmd.trim();
    cmd.toUpperCase();

    // extract data. toFloat() returns 0 on error
    String data = read_.substring(idx + 1);
    data.trim();
    val = data.toFloat();

    // reset parameter for next command
    memset(Buffer, 0, sizeof(Buffer));
    buffer_index = 0;
    newData = false;
  }
}

void sendResponse(String msg) {
  Serial.println(msg);
}

void sendFloatResponse(float val) {
  Serial.println(String(val, 3));
}

void sendBinaryResponse(float val) {
  byte *b = (byte*)&val;
  Serial.write(b, 4);  
}

void dispatchCommand(void) {
  if (cmd == "A") {
    setHeater1(0);
    setHeater2(0);
    sendResponse("Start");
  }
  else if (cmd == "LED") {
    ledTimeout = millis() + 10000;
    LED = max(0, min(100, val));
    sendResponse(String(LED));
  }
  else if (cmd == "P1") {
    P1 = max(0, min(255, val));
    sendResponse(String(P1));
  }
  else if (cmd == "P2") {
    P2 = max(0, min(255, val));
    sendResponse(String(P2));
  }
  else if (cmd == "Q1") {
    setHeater1(val);
    sendFloatResponse(Q1);
  }
  else if (cmd == "Q1B") {
    setHeater1(val);
    sendBinaryResponse(Q1);
  }
  else if (cmd == "Q2") {
    setHeater2(val);
    sendFloatResponse(Q2);
  }
  else if (cmd == "Q2B") {
    setHeater1(val);
    sendBinaryResponse(Q2);
  }
  else if (cmd == "R1") {
    sendFloatResponse(Q1);
  }
  else if (cmd == "R2") {
    sendFloatResponse(Q2);
  }
  else if (cmd == "SCAN") {
    sendFloatResponse(readTemperature(pinT1));
    sendFloatResponse(readTemperature(pinT2));
    sendFloatResponse(Q1);
    sendFloatResponse(Q2);
  }
  else if (cmd == "T1") {
    sendFloatResponse(readTemperature(pinT1));
  }
  else if (cmd == "T1B") {
    sendBinaryResponse(readTemperature(pinT1));
  }
  else if (cmd == "T2") {
    sendFloatResponse(readTemperature(pinT2));
  }
  else if (cmd == "T2B") {
    sendBinaryResponse(readTemperature(pinT2));
  }
  else if (cmd == "VER") {
    sendResponse("TCLab Firmware " + vers + " " + boardType);
  }
  else if (cmd == "X") {
    setHeater1(0);
    setHeater2(0);
    sendResponse("Stop");
  }
  else if (cmd.length() > 0) {
    setHeater1(0);
    setHeater2(0);
    sendResponse(cmd);
  }
  Serial.flush();
  cmd = "";
}

void checkAlarm(void) {
  if ((readTemperature(pinT1) > limT1) or (readTemperature(pinT2) > limT2)) {
    alarmStatus = 1;
  }
  else {
    alarmStatus = 0;
  }
}

void updateStatus(void) {
  // determine led status
  ledStatus = 1;
  if ((Q1 > 0) or (Q2 > 0)) {
    ledStatus = 2;
  }
  if (alarmStatus > 0) {
    ledStatus += 2;
  }
  // update led depending on ledStatus
  if (millis() < ledTimeout) {        // override led operation
    analogWrite(pinLED1, LED);
  }
  else {
    switch (ledStatus) {
      case 1:  // normal operation, heaters off
        analogWrite(pinLED1, loLED);
        break;
      case 2:  // normal operation, heater on
        analogWrite(pinLED1, hiLED);
        break;
      case 3:  // high temperature alarm, heater off
        if ((millis() % 2000) > 1000) {
          analogWrite(pinLED1, loLED);
        } else {
          analogWrite(pinLED1, loLED/4);
        }
        break;
      case 4:  // high temperature alarm, heater on
        if ((millis() % 2000) > 1000) {
          analogWrite(pinLED1, hiLED);
        } else {
          analogWrite(pinLED1, loLED);
        }
        break;
    }   
  }
}

// set Heater 1
void setHeater1(float qval) {
  Q1 = max(0., min(qval, 100.));
  analogWrite(pinQ1, (Q1*P1)/100);
}

// set Heater 2
void setHeater2(float qval) {
  Q2 = max(0., min(qval, 100.));
  analogWrite(pinQ2, (Q2*P2)/100);
}

// arduino startup
void setup() {
  //analogReference(EXTERNAL);
  while (!Serial) {
    ; // wait for serial port to connect.
  }
  Serial.begin(baud);
  Serial.flush();
  setHeater1(0);
  setHeater2(0);
  ledTimeout = millis() + 1000;
}

// arduino main event loop
void loop() {
  readCommand();
  if (DEBUG) echoCommand();
  parseCommand();
  dispatchCommand();
  checkAlarm();
  updateStatus();
}

================
File: limonata\data_logging.py
================
class DataLogger:
    def __init__(self):
        self.log = []

    
    def log(self, sensor_data: float) -> None:
        self.log.append(sensor_data)

================
File: limonata\reactor.py
================
from __future__ import print_function
import time
import random
import serial  # type: ignore
from serial.tools import list_ports  # type: ignore
from limonata.timer import timer
from limonata.version import __version__

from typing import Callable, Any

sep: str = " "  # command/value separator in Reactor firmware

arduinos: list[tuple[str, str]] = [
    ("USB VID:PID=16D0:0613", "Arduino Uno"),
    ("USB VID:PID=1A86:7523", "NHduino"),
    ("USB VID:PID=2341:8036", "Arduino Leonardo"),
    ("USB VID:PID=2A03", "Arduino.org device"),
    ("USB VID:PID", "unknown device"),
]

_connected: bool = False


def clip(val: float, lower: float = 0, upper: float = 100) -> float:
    """Limit value to be between lower and upper limits"""
    return max(lower, min(val, upper))


def command(name: str, argument: float, lower: float = 0, upper: float = 100) -> str:
    """Construct command to the firmware."""
    return name + sep + str(clip(argument, lower, upper))


def find_arduino(port: str = "") -> tuple[str | None, str | None]:
    """Locates Arduino and returns port and device."""
    comports: list[tuple[str, str, str]] = [
        tuple for tuple in list_ports.comports() if port in tuple[0]
    ]
    for port, desc, hwid in comports:
        for identifier, arduino in arduinos:
            if hwid.startswith(identifier):
                return port, arduino
    print("--- Serial Ports ---")
    for port, desc, hwid in list_ports.comports():
        print(port, desc, hwid)
    return None, None


class AlreadyConnectedError(Exception):
    pass


class Reactor:
    def __init__(self, port: str = "", debug: bool = False):
        global _connected
        self.debug: bool = debug
        print("Reactor version", __version__)
        self.port, self.arduino = find_arduino(port)
        if self.port is None:
            raise RuntimeError("No Arduino device found.")

        try:
            self.connect(baud=115200)
        except AlreadyConnectedError:
            raise
        except Exception as e:
            print(f"Error occurred: {e}")
            try:
                _connected = False
                self.sp.close()
                self.connect(baud=9600)
                print("Could not connect at high speed, but succeeded at low speed.")
            except Exception as e:
                print(f"Failed to connect: {e}")
                raise RuntimeError("Failed to connect.")

        self.sp.readline().decode("UTF-8")
        self.version: str = self.send_and_receive("VER")
        if self.sp.isOpen():
            print(
                self.arduino, "connected on port", self.port, "at", self.baud, "baud."
            )
            print(self.version + ".")
        timer.set_rate(1)
        timer.start()
        self._P1: float = 200.0
        self._P2: float = 100.0
        self.Q2(0)
        self.sources: list[tuple[str, Callable | None]] = [
            ("T1", self.scan),
            ("T2", None),
            ("Q1", None),
            ("Q2", None),
        ]

    def __enter__(self) -> "Reactor":
        return self

    def __exit__(
        self, exc_type: type | None, exc_value: Exception | None, traceback
    ) -> None:
        self.close()

    def connect(self, baud: int) -> None:
        """Establish a connection to the Arduino

        baud: baud rate"""
        global _connected

        if _connected:
            raise AlreadyConnectedError("You already have an open connection")

        _connected = True
        self.sp = serial.Serial(port=self.port, baudrate=baud, timeout=2)
        time.sleep(2)
        self.Q1(0)  # fails if not connected
        self.baud: int = baud

    def close(self) -> None:
        """Shut down Reactor device and close serial connection."""
        global _connected

        self.Q1(0)
        self.Q2(0)
        self.send_and_receive("X")
        self.sp.close()
        _connected = False
        print("Reactor disconnected successfully.")

    def send(self, msg: str) -> None:
        """Send a string message to the Reactor firmware."""
        self.sp.write((msg + "\r\n").encode())
        if self.debug:
            print('Sent: "' + msg + '"')
        self.sp.flush()

    def receive(self) -> str:
        """Return a string message received from the Reactor firmware."""
        msg: str = self.sp.readline().decode("UTF-8").replace("\r\n", "")
        if self.debug:
            print('Return: "' + msg + '"')
        return msg

    def send_and_receive(self, msg: str, convert: type = str) -> Any:
        """Send a string message and return the response"""
        self.send(msg)
        return convert(self.receive())

    def LED(self, val: float = 100) -> float:
        """Flash Reactor LED at a specified brightness for 10 seconds."""
        return self.send_and_receive(command("LED", val), float)

    @property
    def T1(self) -> float:
        """Return a float denoting Reactor temperature T1 in degrees C."""
        return self.send_and_receive("T1", float)

    @property
    def T2(self) -> float:
        """Return a float denoting Reactor temperature T2 in degrees C."""
        return self.send_and_receive("T2", float)

    @property
    def P1(self) -> float:
        """Return a float denoting maximum power of heater 1 in pwm."""
        return self._P1

    @P1.setter
    def P1(self, val: float) -> None:
        """Set maximum power of heater 1 in pwm, range 0 to 255."""
        self._P1 = self.send_and_receive(command("P1", val, 0, 255), float)

    @property
    def P2(self) -> float:
        """Return a float denoting maximum power of heater 2 in pwm."""
        return self._P2

    @P2.setter
    def P2(self, val: float) -> None:
        """Set maximum power of heater 2 in pwm, range 0 to 255."""
        self._P2 = self.send_and_receive(command("P2", val, 0, 255), float)

    def Q1(self, val: float | None = None) -> float:
        """Get or set Reactor heater power Q1

        val: Value of heater power, range is limited to 0-100

        return clipped value."""
        if val is None:
            msg = "R1"
        else:
            msg = "Q1" + sep + str(clip(val))
        return self.send_and_receive(msg, float)

    def Q2(self, val: float | None = None) -> float:
        """Get or set Reactor heater power Q2

        val: Value of heater power, range is limited to 0-100

        return clipped value."""
        if val is None:
            msg = "R2"
        else:
            msg = "Q2" + sep + str(clip(val))
        return self.send_and_receive(msg, float)

    def scan(self) -> tuple[float, float, float, float]:
        T1: float = self.T1
        T2: float = self.T2
        Q1: float = self.Q1()
        Q2: float = self.Q2()
        return T1, T2, Q1, Q2

    U1 = property(
        fget=lambda self: self.Q1(),
        fset=lambda self, val: self.Q1(val),
        doc="Heater 1 value",
    )

    U2 = property(
        fget=lambda self: self.Q2(),
        fset=lambda self, val: self.Q2(val),
        doc="Heater 2 value",
    )


class ReactorModel:
    def __init__(self, port: str = "", debug: bool = False, synced: bool = True):
        self.debug: bool = debug
        self.synced: bool = synced
        print("Reactor version", __version__)
        timer.start()
        print("Simulated Reactor")
        self.Ta: float = 21  # ambient temperature
        self.tstart: float = timer.time()  # start time
        self.tlast: float = self.tstart  # last update time
        self._P1: float = 200.0  # max power heater 1
        self._P2: float = 100.0  # max power heater 2
        self._Q1: float = 0  # initial heater 1
        self._Q2: float = 0  # initial heater 2
        self._T1: float = self.Ta  # temperature thermistor 1
        self._T2: float = self.Ta  # temperature thermistor 2
        self._H1: float = self.Ta  # temperature heater 1
        self._H2: float = self.Ta  # temperature heater 2
        self.maxstep: float = 0.2  # maximum time step for integration
        self.sources: list[tuple[str, Callable | None]] = [
            ("T1", self.scan),
            ("T2", None),
            ("Q1", None),
            ("Q2", None),
        ]

    def __enter__(self) -> "ReactorModel":
        return self

    def __exit__(
        self, exc_type: type | None, exc_value: Exception | None, traceback
    ) -> None:
        self.close()

    def close(self) -> None:
        """Simulate shutting down Reactor device."""
        self.Q1(0)
        self.Q2(0)
        print("Reactor Model disconnected successfully.")

    def LED(self, val: float = 100) -> float:
        """Simulate flashing Reactor LED

        val : specified brightness (default 100)."""
        self.update()
        return clip(val)

    @property
    def T1(self) -> float:
        """Return a float denoting Reactor temperature T1 in degrees C."""
        self.update()
        return self.measurement(self._T1)

    @property
    def T2(self) -> float:
        """Return a float denoting Reactor temperature T2 in degrees C."""
        self.update()
        return self.measurement(self._T2)

    @property
    def P1(self) -> float:
        """Return a float denoting maximum power of heater 1 in pwm."""
        self.update()
        return self._P1

    @P1.setter
    def P1(self, val: float) -> None:
        """Set maximum power of heater 1 in pwm, range 0 to 255."""
        self.update()
        self._P1 = clip(val, 0, 255)

    @property
    def P2(self) -> float:
        """Return a float denoting maximum power of heater 2 in pwm."""
        self.update()
        return self._P2

    @P2.setter
    def P2(self, val: float) -> None:
        """Set maximum power of heater 2 in pwm, range 0 to 255."""
        self.update()
        self._P2 = clip(val, 0, 255)

    def Q1(self, val: float | None = None) -> float:
        """Get or set ReactorModel heater power Q1

        val: Value of heater power, range is limited to 0-100

        return clipped value."""
        self.update()
        if val is not None:
            self._Q1 = clip(val)
        return self._Q1

    def Q2(self, val: float | None = None) -> float:
        """Get or set ReactorModel heater power Q2

        val: Value of heater power, range is limited to 0-100

        return clipped value."""
        self.update()
        if val is not None:
            self._Q2 = clip(val)
        return self._Q2

    def scan(self) -> tuple[float, float, float, float]:
        self.update()
        return (
            self.measurement(self._T1),
            self.measurement(self._T2),
            self._Q1,
            self._Q2,
        )

    U1 = property(
        fget=lambda self: self.Q1(),
        fset=lambda self, val: self.Q1(val),
        doc="Heater 1 value",
    )

    U2 = property(
        fget=lambda self: self.Q2(),
        fset=lambda self, val: self.Q2(val),
        doc="Heater 2 value",
    )

    def quantize(self, T: float) -> float:
        """Quantize model temperatures to mimic Arduino A/D conversion."""
        return max(-50, min(132.2, T - T % 0.3223))

    def measurement(self, T: float) -> float:
        return self.quantize(T + random.normalvariate(0, 0.043))

    def update(self, t: float | None = None) -> None:
        if t is None:
            if self.synced:
                self.tnow: float = timer.time() - self.tstart
            else:
                return
        else:
            self.tnow = t

        teuler: float = self.tlast

        while teuler < self.tnow:
            dt: float = min(self.maxstep, self.tnow - teuler)
            DeltaTaH1: float = self.Ta - self._H1
            DeltaTaH2: float = self.Ta - self._H2
            DeltaT12: float = self._H1 - self._H2
            dH1: float = self._P1 * self._Q1 / 5720 + DeltaTaH1 / 20 - DeltaT12 / 100
            dH2: float = self._P2 * self._Q2 / 5720 + DeltaTaH2 / 20 + DeltaT12 / 100
            dT1: float = (self._H1 - self._T1) / 140
            dT2: float = (self._H2 - self._T2) / 140

            self._H1 += dt * dH1
            self._H2 += dt * dH2
            self._T1 += dt * dT1
            self._T2 += dt * dT2
            teuler += dt

        self.tlast = self.tnow


def diagnose(port: str = "") -> None:
    def countdown(t: int = 10) -> None:
        for i in reversed(range(t)):
            print("\r" + "Countdown: {0:d}  ".format(i), end="", flush=True)
            time.sleep(1)
        print()

    def heading(string: str) -> None:
        print()
        print(string)
        print("-" * len(string))

    heading("Checking connection")

    if port:
        print("Looking for Arduino on {} ...".format(port))
    else:
        print("Looking for Arduino on Any port...")
    comport, name = find_arduino(port=port)

    if comport is None:
        print("No known Arduino was found in the ports listed above.")
        return

    print(name, "found on port", comport)

    heading("Testing Reactor object in debug mode")

    with Reactor(port=port, debug=True) as reactor:
        print("Reading temperature")
        print(reactor.T1)

    heading("Testing Reactor functions")

    with Reactor(port=port) as reactor:
        print("Testing LED. Should turn on for 10 seconds.")
        reactor.LED(100)
        countdown()

        print()
        print("Reading temperatures")
        T1: float = reactor.T1
        T2: float = reactor.T2
        print("T1 = {} 째C, T2 = {} 째C".format(T1, T2))

        print()
        print("Writing fractional value to heaters...")
        try:
            Q1: float = reactor.Q1(0.5)
        except Exception as e:
            print(f"Error occurred while setting Q1: {e}")
            Q1 = -1.0
        print("We wrote Q1 = 0.5, and read back Q1 =", Q1)

        if Q1 != 0.5:
            print(
                "Your Reactor firmware version ({}) doesn't support"
                "fractional heater values.".format(reactor.version)
            )

        print()
        print(
            "We will now turn on the heaters, wait 30 seconds "
            "and see if the temperatures have gone up. "
        )
        reactor.Q1(100)
        reactor.Q2(100)
        countdown(30)

        print()

        def tempcheck(name: str, T_initial: float, T_final: float) -> None:
            print(
                "{} started at {} 째C and went to {} 째C".format(name, T_initial, T_final)
            )
            if T_final - T_initial < 0.8:
                print("The temperature went up less than expected.")
                print("Check the heater power supply.")

        T1_final: float = reactor.T1
        T2_final: float = reactor.T2

        tempcheck("T1", T1, T1_final)
        tempcheck("T2", T2, T2_final)

        print()
        heading("Throughput check")
        print("This part checks how fast your unit is")
        print("We will read T1 as fast as possible")

        start: float = time.time()
        n: int = 0
        while time.time() - start < 10:
            elapsed: float = time.time() - start + 0.0001  # avoid divide by zero
            T1 = reactor.T1
            n += 1
            print(
                "\rTime elapsed: {:3.2f} s."
                " Number of reads: {}."
                " Sampling rate: {:2.2f} Hz".format(elapsed, n, n / elapsed),
                end="",
            )

        print()

    print()
    print("Diagnostics complete")

================
File: limonata\timer.py
================
import time as time


class Timer:
    def __init__(self):
        self._realtime = time.time()
        self._timer = 0
        self._rate = 1
        self._running = True
        self.lastsleep = 0

    @property
    def running(self):
        """Returns variable indicating whether timer is running."""
        return self._running

    def time(self):
        """Return current timer."""
        if self.running:
            elapsed = time.time() - self._realtime
            return self._timer + self._rate * elapsed
        else:
            return self._timer

    def set_rate(self, rate=1):
        """Set the rate of timer relative to real time."""
        if rate <= 0:
            raise ValueError("timer rates must be positive.")
        self._timer = self.time()
        self._realtime = time.time()
        self._rate = rate

    def get_rate(self):
        """Return the rate of timer relative to real time."""
        return self._rate

    def sleep(self, delay):
        """Sleep in timer for a period delay."""
        self.lastsleep = delay
        if self._running:
            time.sleep(delay / self._rate)
        else:
            raise RuntimeWarning("sleep is not valid when timer is stopped.")

    def stop(self):
        """Stop timer."""
        self._timer = self.time()
        self._realtime = time.time()
        self._running = False

    def start(self):
        """Restart timer."""
        self._realtime = time.time()
        self._running = True

    def reset(self, val=0):
        """Reset timer to a specified value."""
        self._timer = val
        self._realtime = time.time()


timer = Timer()


# for backwards compatability
def setnow(tnow=0):
    timer.reset(tnow)


def clock(period, step=1, tol=float("inf"), adaptive=True):
    """Generator providing time values in sync with real time clock.

    Args:
        period (float): Time interval for clock operation in seconds.
        step (float): Time step.
        tol (float): Maximum permissible deviation from real time.
        adaptive (Boolean): If true, and if the rate != 1, then the timer
            rate is adjusted to maximize simulation speed.

    Yields:
        float: The next time step rounded to nearest 10th of a second.


    Note:
        * Passing `tol=float('inf')` will effectively disable sync error checking
        * When large values for `tol` are used, no guarantees are made that the
          last time returned will be equal to `period`.
    """
    start = timer.time()
    now = 0

    while round(now, 0) <= period:
        yield round(now, 2)
        if round(now) >= period:
            break
        elapsed = timer.time() - (start + now)
        rate = timer.get_rate()
        if (rate != 1) and adaptive:
            if elapsed > step:
                timer.set_rate(0.8 * rate * step / elapsed)
            elif (elapsed < 0.5 * step) & (rate < 50):
                timer.set_rate(1.25 * rate)
        else:
            if elapsed > step + tol:
                message = (
                    "timer clock lost synchronization with real time. "
                    "Step size was {} s, but {:.2f} s elapsed "
                    "({:.2f} too long). Consider increasing step."
                )
                raise RuntimeError(message.format(step, elapsed, elapsed - step))
        timer.sleep(step - (timer.time() - start) % step)
        now = timer.time() - start

================
File: limonata\version.py
================
__version__ = "0.1.0"

================
File: limonata\__init__.py
================
from .reactor import Reactor, ReactorModel  # , diagnose

# from .historian import Historian, Plotter
# from .experiment import Experiment, runexperiment
from .timer import timer  # , setnow, clock
# from .version import __version__


def setup(connected=True, speedup=1):
    """Set up a reactor session with simple switching between real and model reactor

    The idea of this function is that you will do

    >>> reactor = setup(connected=True)

    to obtain a reactor class reference. If `connected=False` then you will
    receive a ReactorModel class reference. This allows you to switch between
    the model and the real reactor in your code easily.

    The speedup option can only be used when `connected=False` and is the
    ratio by which the reactor clock will be sped up relative to real time
    during the simulation.

    For example

    >>> reactor = setup(connected=False, speedup=2)

    will run the reactor clock at twice real time (which means that the whole
    simulation will take half the time it would if connected to a real device).
    """

    if connected:
        reactor = Reactor
        if speedup != 1:
            raise ValueError("The real reactor must run in real time")
    else:
        reactor = ReactorModel
        if speedup < 0:
            raise ValueError(
                "speedup must be positive. " "You passed speedup={}".format(speedup)
            )

    timer.set_rate(speedup)
    return reactor

================
File: tests\test_reactor.py
================
# from limonata.reactor import Reactor
# import pytest as pt
# from unittest import mock


# @pt.fixture
# def reactor() -> Reactor:
#     """Fixture for creating a Reactor instance for each test."""
#     # Mock the serial connection
#     with mock.patch('serial.Serial') as mock_serial:
#         mock_serial.return_value.isOpen.return_value = True  # Simulate open connection
#         mock_serial.return_value.readline.return_value = b'OK\n'  # Simulate reading a line
#         mock_serial.return_value.write.return_value = None  # Simulate writing to serial
#         return Reactor(port="", debug=True)


# def test_reactor_initialization(reactor: Reactor) -> None:
#     """Test if the reactor connects and initializes correctly."""
#     reactor.connect(baud_rate=115200)
#     assert reactor.sp.isOpen()  # Ensure the serial connection is open
#     assert reactor.baud_rate == 115200  # Ensure the baud rate is set correctly


# def test_start_reactor(reactor: Reactor) -> None:
#     """Test if the reactor initializes with the correct default values."""
#     assert reactor.port is not None  # Ensure the port is set
#     assert reactor.baud_rate in [115200, 9600]  # Ensure valid baud rate
#     assert reactor.version.startswith("VERSION")  # Ensure version is set correctly
#     assert reactor.sp.isOpen()  # Ensure the serial connection is open


# def test_Q_control(reactor: Reactor) -> None:
#     """Test if the Q control works properly."""
#     reactor.connect(baud_rate=115200)
#     reactor.Q(100)  # Set the temperature to 100
#     assert reactor.Q() == 100  # Ensure the temperature is set to 100
